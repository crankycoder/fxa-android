buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
        classpath 'com.github.jcandksolutions.gradle:android-unit-test:2.1.1'

        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

allprojects {
    repositories {
        jcenter()
    }
}

version = "0.9.0"
group = 'org.mozilla.accounts.fxa'

def siteUrl = 'https://github.com/crankycoder/fxa-android'
def gitUrl = 'https://github.com/crankycoder/fxa-android.git'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    sourceSets {
        androidTest.setRoot('src/test')
    }

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 18
    }

    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }
}

Properties properties = new Properties()
File bintrayFile = project.rootProject.file('bintray.properties')
if (bintrayFile.exists()) {
    properties.load(bintrayFile.newDataInputStream())
} else {
    properties = null
}

bintray {
    if (properties != null) {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
    }
    configurations = ['archives']
    pkg {
        repo = "firefoxaccounts"
        name = "libfxa"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache 2.0"]
        publish = true
    }
}


apply plugin: 'android-unit-test'

androidUnitTest {
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Firefox Accounts for Android'
                url siteUrl
                licenses {
                    license {
                        name 'Apache 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id 'WareNinja'
                        email 'yg@wareninja.com'
                    }
                    developer {
                        id 'crankycoder'
                        name 'Victor Ng'
                        email 'victor@crankycoder.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

dependencies {

    compile ('com.google.oauth-client:google-oauth-client:1.20.0') {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'httpclient', module: 'org.apache.httpcomponents'
        exclude group: 'junit', module: 'junit'
        exclude group: 'android', module: 'com.google.android'
    }

    compile 'com.google.http-client:google-http-client-android:1.20.0'

    // TODO: this can probably be dropped
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5'

    androidTestCompile 'junit:junit:4.10'
    testCompile        'junit:junit:4.10'

    androidTestCompile 'org.robolectric:robolectric:2.4'
    testCompile        'org.robolectric:robolectric:2.4'

    androidTestCompile "org.mockito:mockito-core:1.+"
    testCompile        "org.mockito:mockito-core:1.+"

    compile 'org.slf4j:slf4j-android:1.7.7'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
